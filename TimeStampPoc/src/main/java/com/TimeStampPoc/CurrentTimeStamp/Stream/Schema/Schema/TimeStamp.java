/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.TimeStampPoc.CurrentTimeStamp.Stream.Schema.Schema;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

import java.time.ZonedDateTime;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TimeStamp extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5468772215911141340L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TimeStamp\",\"namespace\":\"com.TimeStampConsumerPoc.TimeStampConsumer.Stream.Schema\",\"fields\":[{\"name\":\"currentTime\",\"type\":\"string\"},{\"name\":\"TransactionId\",\"type\":\"string\"},{\"name\":\"merchant_name\",\"type\":\"string\"},{\"name\":\"transaction_amt\",\"type\":\"long\"},{\"name\":\"Currency\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TimeStamp> ENCODER =
      new BinaryMessageEncoder<TimeStamp>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TimeStamp> DECODER =
      new BinaryMessageDecoder<TimeStamp>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TimeStamp> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TimeStamp> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TimeStamp>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TimeStamp to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TimeStamp from a ByteBuffer. */
  public static TimeStamp fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence currentTime;
  @Deprecated public CharSequence TransactionId;
  @Deprecated public CharSequence merchant_name;
  @Deprecated public long transaction_amt;
  @Deprecated public CharSequence Currency;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TimeStamp() {}

  /**
   * All-args constructor.
   * @param currentTime The new value for currentTime
   * @param TransactionId The new value for TransactionId
   * @param merchant_name The new value for merchant_name
   * @param transaction_amt The new value for transaction_amt
   * @param Currency The new value for Currency
   */
  public TimeStamp(CharSequence currentTime, CharSequence TransactionId, CharSequence merchant_name, Long transaction_amt, CharSequence Currency) {
    this.currentTime = currentTime;
    this.TransactionId = TransactionId;
    this.merchant_name = merchant_name;
    this.transaction_amt = transaction_amt;
    this.Currency = Currency;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return currentTime;
    case 1: return TransactionId;
    case 2: return merchant_name;
    case 3: return transaction_amt;
    case 4: return Currency;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: currentTime = (CharSequence) value$; break;
    case 1: TransactionId = (CharSequence)value$; break;
    case 2: merchant_name = (CharSequence)value$; break;
    case 3: transaction_amt = (Long)value$; break;
    case 4: Currency = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'currentTime' field.
   * @return The value of the 'currentTime' field.
   */
  public CharSequence getCurrentTime() {
    return currentTime;
  }

  /**
   * Sets the value of the 'currentTime' field.
   * @param value the value to set.
   */
  public void setCurrentTime(CharSequence value) {
    this.currentTime = value;
  }

  /**
   * Gets the value of the 'TransactionId' field.
   * @return The value of the 'TransactionId' field.
   */
  public CharSequence getTransactionId() {
    return TransactionId;
  }

  /**
   * Sets the value of the 'TransactionId' field.
   * @param value the value to set.
   */
  public void setTransactionId(CharSequence value) {
    this.TransactionId = value;
  }

  /**
   * Gets the value of the 'merchant_name' field.
   * @return The value of the 'merchant_name' field.
   */
  public CharSequence getMerchantName() {
    return merchant_name;
  }

  /**
   * Sets the value of the 'merchant_name' field.
   * @param value the value to set.
   */
  public void setMerchantName(CharSequence value) {
    this.merchant_name = value;
  }

  /**
   * Gets the value of the 'transaction_amt' field.
   * @return The value of the 'transaction_amt' field.
   */
  public Long getTransactionAmt() {
    return transaction_amt;
  }

  /**
   * Sets the value of the 'transaction_amt' field.
   * @param value the value to set.
   */
  public void setTransactionAmt(Long value) {
    this.transaction_amt = value;
  }

  /**
   * Gets the value of the 'Currency' field.
   * @return The value of the 'Currency' field.
   */
  public CharSequence getCurrency() {
    return Currency;
  }

  /**
   * Sets the value of the 'Currency' field.
   * @param value the value to set.
   */
  public void setCurrency(CharSequence value) {
    this.Currency = value;
  }

  /**
   * Creates a new TimeStamp RecordBuilder.
   * @return A new TimeStamp RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new TimeStamp RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TimeStamp RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new TimeStamp RecordBuilder by copying an existing TimeStamp instance.
   * @param other The existing instance to copy.
   * @return A new TimeStamp RecordBuilder
   */
  public static Builder newBuilder(TimeStamp other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for TimeStamp instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TimeStamp>
    implements org.apache.avro.data.RecordBuilder<TimeStamp> {

    private CharSequence currentTime;
    private CharSequence TransactionId;
    private CharSequence merchant_name;
    private long transaction_amt;
    private CharSequence Currency;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.currentTime)) {
        this.currentTime = data().deepCopy(fields()[0].schema(), other.currentTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TransactionId)) {
        this.TransactionId = data().deepCopy(fields()[1].schema(), other.TransactionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.merchant_name)) {
        this.merchant_name = data().deepCopy(fields()[2].schema(), other.merchant_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transaction_amt)) {
        this.transaction_amt = data().deepCopy(fields()[3].schema(), other.transaction_amt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Currency)) {
        this.Currency = data().deepCopy(fields()[4].schema(), other.Currency);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TimeStamp instance
     * @param other The existing instance to copy.
     */
    private Builder(TimeStamp other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.currentTime)) {
        this.currentTime = data().deepCopy(fields()[0].schema(), other.currentTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TransactionId)) {
        this.TransactionId = data().deepCopy(fields()[1].schema(), other.TransactionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.merchant_name)) {
        this.merchant_name = data().deepCopy(fields()[2].schema(), other.merchant_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transaction_amt)) {
        this.transaction_amt = data().deepCopy(fields()[3].schema(), other.transaction_amt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Currency)) {
        this.Currency = data().deepCopy(fields()[4].schema(), other.Currency);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'currentTime' field.
      * @return The value.
      */
    public CharSequence getCurrentTime() {
      return currentTime;
    }

    /**
      * Sets the value of the 'currentTime' field.
      * @param value The value of 'currentTime'.
      * @return This builder.
      */
    public Builder setCurrentTime(CharSequence value) {
      validate(fields()[0], value);
      this.currentTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'currentTime' field has been set.
      * @return True if the 'currentTime' field has been set, false otherwise.
      */
    public boolean hasCurrentTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'currentTime' field.
      * @return This builder.
      */
    public Builder clearCurrentTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'TransactionId' field.
      * @return The value.
      */
    public CharSequence getTransactionId() {
      return TransactionId;
    }

    /**
      * Sets the value of the 'TransactionId' field.
      * @param value The value of 'TransactionId'.
      * @return This builder.
      */
    public Builder setTransactionId(CharSequence value) {
      validate(fields()[1], value);
      this.TransactionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'TransactionId' field has been set.
      * @return True if the 'TransactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'TransactionId' field.
      * @return This builder.
      */
    public Builder clearTransactionId() {
      TransactionId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'merchant_name' field.
      * @return The value.
      */
    public CharSequence getMerchantName() {
      return merchant_name;
    }

    /**
      * Sets the value of the 'merchant_name' field.
      * @param value The value of 'merchant_name'.
      * @return This builder.
      */
    public Builder setMerchantName(CharSequence value) {
      validate(fields()[2], value);
      this.merchant_name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'merchant_name' field has been set.
      * @return True if the 'merchant_name' field has been set, false otherwise.
      */
    public boolean hasMerchantName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'merchant_name' field.
      * @return This builder.
      */
    public Builder clearMerchantName() {
      merchant_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction_amt' field.
      * @return The value.
      */
    public Long getTransactionAmt() {
      return transaction_amt;
    }

    /**
      * Sets the value of the 'transaction_amt' field.
      * @param value The value of 'transaction_amt'.
      * @return This builder.
      */
    public Builder setTransactionAmt(long value) {
      validate(fields()[3], value);
      this.transaction_amt = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_amt' field has been set.
      * @return True if the 'transaction_amt' field has been set, false otherwise.
      */
    public boolean hasTransactionAmt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'transaction_amt' field.
      * @return This builder.
      */
    public Builder clearTransactionAmt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'Currency' field.
      * @return The value.
      */
    public CharSequence getCurrency() {
      return Currency;
    }

    /**
      * Sets the value of the 'Currency' field.
      * @param value The value of 'Currency'.
      * @return This builder.
      */
    public Builder setCurrency(CharSequence value) {
      validate(fields()[4], value);
      this.Currency = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'Currency' field has been set.
      * @return True if the 'Currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'Currency' field.
      * @return This builder.
      */
    public Builder clearCurrency() {
      Currency = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TimeStamp build() {
      try {
        TimeStamp record = new TimeStamp();
        record.currentTime = fieldSetFlags()[0] ? this.currentTime : (CharSequence) defaultValue(fields()[0]);
        record.TransactionId = fieldSetFlags()[1] ? this.TransactionId : (CharSequence) defaultValue(fields()[1]);
        record.merchant_name = fieldSetFlags()[2] ? this.merchant_name : (CharSequence) defaultValue(fields()[2]);
        record.transaction_amt = fieldSetFlags()[3] ? this.transaction_amt : (Long) defaultValue(fields()[3]);
        record.Currency = fieldSetFlags()[4] ? this.Currency : (CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TimeStamp>
    WRITER$ = (org.apache.avro.io.DatumWriter<TimeStamp>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TimeStamp>
    READER$ = (org.apache.avro.io.DatumReader<TimeStamp>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
